AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloudformation template to define all IAM objects **WARNING**
  You will be billed for the AWS resources used if you create a stack from this template.
Conditions:
  UseIoT: !Equals
    - !Ref 'DataTransportService'
    - AWS IoT
  UseKinesis: !Equals
    - !Ref 'DataTransportService'
    - Amazon Kinesis
  PIConnector: !Equals
    - !Ref 'ConnectorType'
    - 'PI'
Parameters:
  DataTransportService:
    Type: String
  ConnectorAgentAssetsS3BucketName:
    Type: String
  ConnectorLogGroupName:
    Type: String
  CuratedDatasetsBucketName:
    Type: String
  LicensedSoftwareS3BucketName:
    Type: String
  PublishedDataBucketName:
    Type: String
  QSS3BucketName:
    Description: S3 bucket name for the repository. Repository bucket name can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  RegionalLambdaBucketARN:
    Description: RegionalLambdaBucket bucket ARN
    Type: String
  ConnectorType:
    Type: String
Resources:
  RegionalLambdaBucketReadWritePolicy:
    Properties:
      PolicyName: RegionalLambdaBucketReadWritePolicy
      PolicyDocument:
        Statement:
          - Action:
            - s3:GetObject
            - s3:HeadObject
            - s3:ListBucket
            - s3:ListObjects
            - s3:GetBucketLocation
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            - s3:DeleteObject
            Effect: Allow
            Resource:
              - !Sub '${RegionalLambdaBucketARN}'
              - !Sub '${RegionalLambdaBucketARN}/*'
        Version: '2012-10-17'
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
        - !Ref 'CopyLambdaDeploymentRole'
        - !Ref 'CopyLicensedBinaryLambdaRole'
        - !Ref 'RegisterKibanaDashboardRole'
        - !Ref 'AutoBackfillerLambdaRole'
        - !Ref 'SaveStatusLambdaRole'
    Type: AWS::IAM::Policy
  AthenaTableCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*AthenaTable*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*AthenaTable*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'AthenaTableLambdaRole'
        - !Ref 'AthenaTablePartitionLambdaRole'
    Type: AWS::IAM::Policy
  AthenaTableLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - glue:CreateDatabase
                  - glue:DeleteDatabase
                  - glue:GetDatabase
                  - glue:GetDatabases
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:DeleteTable
                  - glue:BatchDeleteTable
                  - glue:UpdateTable
                  - glue:GetTable
                  - glue:GetTables
                  - glue:BatchCreatePartition
                  - glue:CreatePartition
                  - glue:DeletePartition
                  - glue:BatchDeletePartition
                  - glue:UpdatePartition
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:BatchGetPartition
                Effect: Allow
                Resource: '*'
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:CreateBucket
                  - s3:ListObjects
                  - s3:DeleteObject
                  - s3:DeleteBucket
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}'
                  - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}/*'
            Version: '2012-10-17'
          PolicyName: AthenaAccess
    Type: AWS::IAM::Role
  AthenaTablePartitionLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:ListQueryExecutions
                  - glue:GetDatabase
                  - glue:GetPartition
                  - glue:CreateTable
                  - glue:CreateDatabase
                  - glue:CreatePartition
                  - glue:GetTable
                  - glue:BatchCreatePartition
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: AthenaPartitionAccess
    Type: AWS::IAM::Role
  CreateCognitoAdminRoleLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CreateCognito*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CreateCognito*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'CreateCognitoAdminRole'
    Type: AWS::IAM::Policy
  CreateCognitoAdminRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - cognito-idp:*
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
            Version: '2012-10-17'
          PolicyName: CognitoAccess
    Type: AWS::IAM::Role
  CommunicationWorkerLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*OutgoingQueue*'
          PolicyName: LambdaSqsAccessPolicy
    Type: AWS::IAM::Role
  VPCDestroyEniExecutionRole:
    Properties:
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:DetachNetworkInterface
            - ec2:DeleteSecurityGroup
            Effect: Allow
            Resource: '*'
        PolicyName: LambdaDetachPolicy
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Type: AWS::IAM::Role
  IoTAccessPolicy:
    Condition: UseIoT
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - iot:RegisterThing
              - iot:UpdateThing
              - iot:CreateThing
              - iot:DescribeThing
              - iot:DeleteThing
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/*'
        Version: '2012-10-17'
      PolicyName: IoTAccessPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
    Type: AWS::IAM::Policy
  ConnectorCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ConnectorLogGroupName}'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ConnectorLogGroupName}:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
    Type: AWS::IAM::Policy
  ConnectorAgentInstanceProfile:
    Properties:
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
    Type: AWS::IAM::InstanceProfile
  ConnectorCloudWatchMetricsPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:putMetricData
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: CloudWatchMetricsPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
    Type: AWS::IAM::Policy
  ConnectorAgentInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:HeadObject
                  - s3:ListBucket
                  - s3:ListObjects
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${ConnectorAgentAssetsS3BucketName}'
                  - !Sub 'arn:aws:s3:::${ConnectorAgentAssetsS3BucketName}/*'
            Version: '2012-10-17'
          PolicyName: CAAsssetsBucketReadPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:AssociateAddress
                  - ec2:DescribeAddresses
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: EC2Policy
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/AmazonCloudWatch-*'
              - Action:
                  - ssm:DescribeAssociation
                  - ssm:GetDeployablePatchSnapshotForInstance
                  - ssm:GetDocument
                  - ssm:GetManifest
                  - ssm:GetParameters
                  - ssm:ListAssociations
                  - ssm:ListInstanceAssociations
                  - ssm:PutInventory
                  - ssm:PutComplianceItems
                  - ssm:PutConfigurePackageResult
                  - ssm:UpdateAssociationStatus
                  - ssm:UpdateInstanceAssociationStatus
                  - ssm:UpdateInstanceInformation
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*/*'
              - Action:
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                Effect: Allow
                Resource: '*'
              - Action:
                  - cloudwatch:PutMetricData
                  - ec2:DescribeTags
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: '*'
              - Action:
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: SSMPolicy
    Type: AWS::IAM::Role
  KinesisAccessPolicy:
    Condition: UseKinesis
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kinesis:PutRecord
              - kinesis:PutRecords
              - kinesis:DescribeStream
            Effect: Allow
            Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*InputStream*'
        Version: '2012-10-17'
      PolicyName: KinesisAccessPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
    Type: AWS::IAM::Policy
  CopyLambdaCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CopyLambda*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CopyLambda*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'CopyLambdaDeploymentRole'
    Type: AWS::IAM::Policy
  CopyLambdaDeploymentRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CopyLicensedBinaryLambdaCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CopyLicensedBinary*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CopyLicensedBinary*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'CopyLicensedBinaryLambdaRole'
    Type: AWS::IAM::Policy
  CopyLicensedBinaryLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:HeadObject
                  - s3:ListBucket
                  - s3:ListObjects
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${LicensedSoftwareS3BucketName}'
                  - !Sub 'arn:aws:s3:::${LicensedSoftwareS3BucketName}/*'
                  - !Sub 'arn:aws:s3:::${ConnectorAgentAssetsS3BucketName}'
                  - !Sub 'arn:aws:s3:::${ConnectorAgentAssetsS3BucketName}/*'
            Version: '2012-10-17'
          PolicyName: S3ASInstallKitBucketAccess
    Type: AWS::IAM::Role
  ElasticsearchAccessPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - es:DescribeElasticsearchDomain
              - es:DescribeElasticsearchDomains
              - es:DescribeElasticsearchDomainConfig
              - es:ESHttpPost
              - es:ESHttpPut
              - es:ESHttpGet
              - es:ESHttpDelete
            Effect: Allow
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
        Version: '2012-10-17'
      PolicyName: ElasticsearchAccessPolicy
      Roles: !If
        - UseKinesis
        - - !Ref 'ElasticsearchAccessRole'
          - !Ref 'ElasticsearchIndexCleanLambdaRole'
          - !Ref 'LogsToElasticsearchRole'
          - !Ref 'RegisterKibanaDashboardRole'
          - !Ref 'SaveStatusLambdaRole'
          - !Ref 'AutoBackfillerLambdaRole'
        - - !Ref 'ElasticsearchIndexCleanLambdaRole'
          - !Ref 'LogsToElasticsearchRole'
          - !Ref 'RegisterKibanaDashboardRole'
          - !Ref 'SaveStatusLambdaRole'
          - !Ref 'AutoBackfillerLambdaRole'
    Type: AWS::IAM::Policy
  ElasticsearchAccessRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ElasticsearchBucketRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ElasticsearchIndexCleanLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ElasticsearchIndexCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*ElasticsearchIndex*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*ElasticsearchIndex*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'ElasticsearchIndexCleanLambdaRole'
    Type: AWS::IAM::Policy
  GenerateCSRLambdaRole:
    Condition: UseIoT
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
  DeactivateCertificateLambdaRole:
    Condition: UseIoT
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iot:UpdateCertificate
                Effect: Allow
                Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/*'
            Version: '2012-10-17'
          PolicyName: IoTUpdateCertificate
  CreateIoTRulesLambdaRole:
    Condition: UseIoT
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
            Version: '2012-10-17'
          PolicyName: CloudWatchLambdaLoggingPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - iot:CreateTopicRule
                Effect: Allow
                Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/*'
            Version: '2012-10-17'
          PolicyName: IoTCreateTopicRulePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
            Version: '2012-10-17'
          PolicyName: IAMPassRolePolicy
  GenerateCSRLambdaRolePolicy:
    Condition: UseIoT
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      PolicyName: CloudWatchLambdaLoggingPolicy
      Roles:
        - !Ref 'GenerateCSRLambdaRole'
    Type: AWS::IAM::Policy

  CreateTablesLambdaRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      PolicyName: CreateTablesLambdaRolePolicy
      Roles:
        - !Ref 'CreateTablesLambdaRole'
    Type: AWS::IAM::Policy
  CleanEventsLambdaRolePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: CleanEventsLambdaRolePolicy
      Roles:
        - !Ref 'CleanEventsLambdaRole'
    Type: AWS::IAM::Policy
  DeactivateCertificateLambdaRolePolicy:
    Condition: UseIoT
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action: iot:UpdateCertificate
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLambdaLoggingPolicy
      Roles:
        - !Ref 'DeactivateCertificateLambdaRole'
    Type: AWS::IAM::Policy
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ECSRole'
  GenericPeriodicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
  CleanEventsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
  ECSTaskExecutionPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - '*'
        Version: '2012-10-17'
      PolicyName: ECSTaskExectionPolicy
      Roles:
        - !Ref 'ECSTaskExecutionRole'
    Type: AWS::IAM::Policy
  GenerateAppSecretLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
  GenerateAppSecretLambdaRoleLogsPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
      PolicyName: CloudWatchLambdaLoggingPolicy
      Roles:
        - !Ref 'GenerateAppSecretLambdaRole'
    Type: AWS::IAM::Policy
  GenerateAppSecretLambdaRoleKMSPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kms:GenerateRandom
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
      PolicyName: KMSLambdaPolicy
      Roles:
        - !Ref 'GenerateAppSecretLambdaRole'
    Type: AWS::IAM::Policy
  IoTRulesRole:
    Condition: UseIoT
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - cloudwatch:PutMetricData
                  - es:ESHttpPut
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: MosquittoBrokerIoTPolicy
    Type: AWS::IAM::Role
  KinesisAnalyticsCloudWatchLoggingPolicy:
    Condition: UseKinesis
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*KinesisAnalytics*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*KinesisAnalytics*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'KinesisAnalyticsLambdaRole'
    Type: AWS::IAM::Policy
  KinesisAnalyticsLambdaRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kinesisanalytics:CreateApplication
                  - kinesisanalytics:DeleteApplication
                  - kinesisanalytics:DescribeApplication
                  - kinesisanalytics:StartApplication
                  - kinesisanalytics:AddApplicationReferenceDataSource
                Effect: Allow
                Resource: !Sub 'arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/managed-feeds*'
              - Action:
                  - iam:GetRole
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
              - Action:
                  - iam:GetRole
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
            Version: '2012-10-17'
          PolicyName: KinesisAnalyticsAccess
    Type: AWS::IAM::Role
  KinesisStreamAccessPolicy:
    Condition: UseKinesis
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - kinesis:CreateStream
              - kinesis:DeleteStream
              - kinesis:DescribeStream
              - kinesis:ListStreams
              - kinesis:PutRecord
              - kinesis:PutRecords
              - kinesis:GetRecords
              - kinesis:GetShardIterator
            Effect: Allow
            Resource: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*'
        Version: '2012-10-17'
      PolicyName: KinesisStreamAccessPolicy
      Roles:
        - !Ref 'StreamsAccessRole'
    Type: AWS::IAM::Policy
  LogsToElasticsearchCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LogsToElasticsearch*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*LogsToElasticsearch*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'LogsToElasticsearchRole'
    Type: AWS::IAM::Policy
  LogsToElasticsearchRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ManagedFeedsBucketRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ManagementConsoleInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - events:PutTargets
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:ListRuleNamesByTarget
                  - events:EnableRule
                  - events:PutRule
                  - events:ListRules
                  - events:RemoveTargets
                  - events:ListTargetsByRule
                  - events:DisableRule
                Effect: Allow
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'
              - Action: iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AWS_Events_Invoke_Targets'
            Version: '2012-10-17'
          PolicyName: CloudWatchEventsAccess
    Type: AWS::IAM::Role
  APIInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - events:PutTargets
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:ListRuleNamesByTarget
                  - events:EnableRule
                  - events:PutRule
                  - events:ListRules
                  - events:RemoveTargets
                  - events:ListTargetsByRule
                  - events:DisableRule
                Effect: Allow
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'
              - Action: iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/AWS_Events_Invoke_Targets'
            Version: '2012-10-17'
          PolicyName: CloudWatchEventsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - cognito-idp:SignUp
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:InitiateAuth
                  - cognito-idp:RespondToAuthChallenge
                  - cognito-idp:GlobalSignOut
                  - cognito-idp:GetUser
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
            Version: '2012-10-17'
          PolicyName: CognitoManagementConsoleAccess
    Type: AWS::IAM::Role
  MosquittoBrokerRole:
    Condition: UseIoT
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iot:Connect
                  - iot:Publish
                  - iot:DescribeCertificate
                  - iot:DescribeEndpoint
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: MosquittoBrokerIoTPolicy
    Type: AWS::IAM::Role
  RegisterKibanaCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*RegisterKibana*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*RegisterKibana*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'RegisterKibanaDashboardRole'
    Type: AWS::IAM::Policy
  CreateTablesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
  CreateS3LambdaTriggerCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CreateS3Lambda*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*CreateS3Lambda*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'CreateS3LambdaTriggerLambdaRole'
    Type: AWS::IAM::Policy
  CreateS3LambdaTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}'
                  - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}/*'
            Version: '2012-10-17'
          PolicyName: KinesisS3NotificationModification
  LambdaInVPC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: VPCAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
            Resource: '*'
      Roles:
        - !Ref 'CreateTablesLambdaRole'
        - !Ref 'GenericPeriodicLambdaRole'
        - !Ref 'CleanEventsLambdaRole'
        - !Ref 'AutoBackfillerLambdaRole'
  RegisterKibanaDashboardRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  S3CuratedBucketReadAccessPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:HeadObject
              - s3:ListBucket
              - s3:ListObjects
              - s3:GetBucketLocation
              - s3:ListBucketMultipartUploads
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}'
              - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}/*'
        Version: '2012-10-17'
      PolicyName: S3CuratedBucketReadAccessPolicy
      Roles: !If
        - UseKinesis
        - - !Ref 'AthenaTablePartitionLambdaRole'
          - !Ref 'CommunicationWorkerLambdaRole'
          - !Ref 'ConnectorAgentInstanceRole'
          - !Ref 'APIInstanceRole'
          - !Ref 'ElasticsearchBucketRole'
          - !Ref 'GenericPeriodicLambdaRole'
          - !Ref 'KinesisAnalyticsLambdaRole'
          - !Ref 'StreamsAccessRole'
        - - !Ref 'AthenaTablePartitionLambdaRole'
          - !Ref 'CommunicationWorkerLambdaRole'
          - !Ref 'ConnectorAgentInstanceRole'
          - !Ref 'APIInstanceRole'
          - !Ref 'GenericPeriodicLambdaRole'
    Type: AWS::IAM::Policy
  S3CuratedBucketWriteAccessPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:AbortMultipartUpload
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}'
              - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}/*'
        Version: '2012-10-17'
      PolicyName: S3CuratedBucketWriteAccessPolicy
      Roles: !If
        - UseKinesis
        - - !Ref 'AthenaTablePartitionLambdaRole'
          - !Ref 'ConnectorAgentInstanceRole'
          - !Ref 'APIInstanceRole'
          - !Ref 'StreamsAccessRole'
          - !Ref 'ManagedFeedsBucketRole'
          - !Ref 'ElasticsearchBucketRole'
          - !Ref 'KinesisAnalyticsLambdaRole'
        - - !Ref 'AthenaTablePartitionLambdaRole'
          - !Ref 'ConnectorAgentInstanceRole'
          - !Ref 'APIInstanceRole'
    Type: AWS::IAM::Policy
  S3GetAssetsPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:HeadObject
              - s3:ListBucket
              - s3:ListObjects
              - s3:GetBucketLocation
              - s3:ListBucketMultipartUploads
              - s3:GetObject
              - s3:HeadObject
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${QSS3BucketName}'
              - !Sub 'arn:aws:s3:::${QSS3BucketName}/*'
        Version: '2012-10-17'
      PolicyName: S3GetAssetsPolicy
      Roles:
        - !Ref 'CommunicationWorkerLambdaRole'
        - !Ref 'ConnectorAgentInstanceRole'
        - !Ref 'ManagementConsoleInstanceRole'
        - !Ref 'APIInstanceRole'
        - !Ref 'CopyLambdaDeploymentRole'
    Type: AWS::IAM::Policy
  S3PublishedDataBucketWriteAccessPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${PublishedDataBucketName}'
              - !Sub 'arn:aws:s3:::${PublishedDataBucketName}/*'
        Version: '2012-10-17'
      PolicyName: S3PublishedDataBucketWriteAccessPolicy
      Roles:
        - !Ref 'APIInstanceRole'
    Type: AWS::IAM::Policy
  SQSReceiveMessagesPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:PurgeQueue
              - lambda:CreateEventSourceMapping
              - lambda:ListEventSourceMappings
              - lambda:ListFunction
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*IncomingQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*OutgoingQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*BackfillQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*InterpolationQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*SubscriptionQueue*'
        Version: '2012-10-17'
      PolicyName: SQSReceiveMessagesPolicy
      Roles:
        - !Ref 'CommunicationWorkerLambdaRole'
        - !Ref 'ConnectorAgentInstanceRole'
        - !Ref 'APIInstanceRole'
    Type: AWS::IAM::Policy
  SQSSendMessagesPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:GetQueueUrl
              - sqs:SendMessage
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*IncomingQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*OutgoingQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*BackfillQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*InterpolationQueue*'
              - !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*SubscriptionQueue*'
        Version: '2012-10-17'
      PolicyName: SQSSendMessagesPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
        - !Ref 'APIInstanceRole'
        - !Ref 'GenericPeriodicLambdaRole'
        - !Ref 'CommunicationWorkerLambdaRole'
        - !Ref 'AutoBackfillerLambdaRole'
    Type: AWS::IAM::Policy
  StreamsAccessRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                  - firehose:ListDeliveryStreams
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*Elasticsearch*'
                  - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*Updates*'
                  - !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*S3*'
                Sid: FirehoseAccess
            Version: '2012-10-17'
          PolicyName: FirehoseAccess
    Type: AWS::IAM::Role
  StreamsReferenceRole:
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${CuratedDatasetsBucketName}/as_table/table.json'
            Version: '2012-10-17'
          PolicyName: ASReferenceDataAccess
    Type: AWS::IAM::Role
  UpdateKinesisReferenceDataCloudWatchLoggingPolicy:
    Condition: UseKinesis
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*UpdateKinesisRef*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*UpdateKinesisRef*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
        - !Ref 'UpdateKinesisReferenceDataLambdaRole'
    Type: AWS::IAM::Policy
  UpdateKinesisReferenceDataLambdaRole:
    Type: AWS::IAM::Role
    Condition: UseKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kinesisanalytics:UpdateApplication
                  - kinesisanalytics:DescribeApplication
                Effect: Allow
                Resource: !Sub 'arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/managed-feeds*'
            Version: '2012-10-17'
          PolicyName: KinesisUpdateApplicationAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*StreamsReferenceRole*'
            Version: '2012-10-17'
          PolicyName: KinesisUpdateApplicationPassRolePolicy
  SNSAccessPolicy:
    Condition: PIConnector
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sns:*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*StateSNSTopic*'
        Version: '2012-10-17'
      PolicyName: SNSAccesPolicy
      Roles:
        - !Ref 'ConnectorAgentInstanceRole'
        - !Ref 'AutoBackfillerLambdaRole'
    Type: AWS::IAM::Policy
  AutoBackfillerLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  AutoBackfillerCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*Backfiller*'
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*Backfiller*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
      - !Ref 'AutoBackfillerLambdaRole'
    Type: AWS::IAM::Policy
  SaveStatusLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  SaveStatusCloudWatchLoggingPolicy:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*SaveStatus*'
          - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*SaveStatus*:log-stream:*'
        Version: '2012-10-17'
      PolicyName: CloudWatchLoggingPolicy
      Roles:
      - !Ref 'SaveStatusLambdaRole'
    Type: AWS::IAM::Policy
Outputs:
  AthenaTablePartitionLambdaRoleARN:
    Value: !GetAtt 'AthenaTablePartitionLambdaRole.Arn'
  CreateCognitoAdminRoleARN:
    Value: !GetAtt 'CreateCognitoAdminRole.Arn'
  CommunicationWorkerLambdaRoleARN:
    Value: !GetAtt 'CommunicationWorkerLambdaRole.Arn'
  ConnectorAgentInstanceProfileARN:
    Value: !Ref 'ConnectorAgentInstanceProfile'
  ConnectorAgentInstanceRoleARN:
    Value: !GetAtt 'ConnectorAgentInstanceRole.Arn'
  GenerateCSRLambdaRoleARN:
    Value: !If
      - UseIoT
      - !GetAtt 'GenerateCSRLambdaRole.Arn'
      - ''
  DeactivateCertificateLambdaRoleARN:
    Value: !If
      - UseIoT
      - !GetAtt 'DeactivateCertificateLambdaRole.Arn'
      - ''
  CreateIoTRulesLambdaRoleARN:
    Value: !If
      - UseIoT
      - !GetAtt 'CreateIoTRulesLambdaRole.Arn'
      - ''
  ECSInstanceProfile:
    Value: !GetAtt 'ECSInstanceProfile.Arn'
  GenericPeriodicLambdaRoleARN:
    Value: !GetAtt 'GenericPeriodicLambdaRole.Arn'
  CleanEventsLambdaRoleARN:
    Value: !GetAtt 'CleanEventsLambdaRole.Arn'
  GenerateAppSecretLambdaRoleARN:
    Value: !GetAtt 'GenerateAppSecretLambdaRole.Arn'
  LogsToElasticsearchRoleARN:
    Value: !GetAtt 'LogsToElasticsearchRole.Arn'
  CopyLambdaDeploymentRoleARN:
    Value: !GetAtt 'CopyLambdaDeploymentRole.Arn'
  CreateTablesLambdaRoleARN:
    Value: !GetAtt 'CreateTablesLambdaRole.Arn'
  CreateS3LambdaTriggerLambdaRoleARN:
    Value: !GetAtt 'CreateS3LambdaTriggerLambdaRole.Arn'
  CopyLicensedBinaryLambdaRoleARN:
    Value: !GetAtt 'CopyLicensedBinaryLambdaRole.Arn'
  ECSTaskExecutionRoleARN:
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
  IotRulesRoleARN:
    Condition: UseIoT
    Value: !If
      - UseIoT
      - !GetAtt 'IoTRulesRole.Arn'
      - ''
  ManagementConsoleRoleARN:
    Value: !GetAtt 'ManagementConsoleInstanceRole.Arn'
  APIInstanceRoleARN:
    Value: !GetAtt 'APIInstanceRole.Arn'
  MosquittoBrokerRoleARN:
    Condition: UseIoT
    Value: !If
      - UseIoT
      - !GetAtt 'MosquittoBrokerRole.Arn'
      - ''
  ElasticsearchAccessRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'ElasticsearchAccessRole.Arn'
  ElasticsearchIndexCleanLambdaRoleARN:
    Value: !GetAtt 'ElasticsearchIndexCleanLambdaRole.Arn'
  RegisterKibanaDashboardRoleARN:
    Value: !GetAtt 'RegisterKibanaDashboardRole.Arn'
  StreamsAccessRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'StreamsAccessRole.Arn'
  StreamsReferenceRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'StreamsReferenceRole.Arn'
  KinesisAnalyticsLambdaRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'KinesisAnalyticsLambdaRole.Arn'
  UpdateKinesisReferenceDataLambdaRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'UpdateKinesisReferenceDataLambdaRole.Arn'
  AthenaTableLambdaRoleARN:
    Value: !GetAtt 'AthenaTableLambdaRole.Arn'
  ElasticsearchBucketRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'ElasticsearchBucketRole.Arn'
  ManagedFeedsBucketRoleARN:
    Condition: UseKinesis
    Value: !GetAtt 'ManagedFeedsBucketRole.Arn'
  AutoBackfillerLambdaRoleARN:
    Value: !GetAtt 'AutoBackfillerLambdaRole.Arn'
  SaveStatusLambdaRoleARN:
    Value: !GetAtt 'SaveStatusLambdaRole.Arn'
  VPCDestroyEniExecutionRoleARN:
    Value: !GetAtt 'VPCDestroyEniExecutionRole.Arn'