AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloudformation template to create Industrial Data Connector Cognito User Pool **WARNING**
  You will be billed for the AWS resources used if you create a stack from this template.
Parameters:
  AdminUsername:
    AllowedPattern: ^[\x00-\x7F]*$
    ConstraintDescription: User name must contain 1 to 64 ASCII characters.
    Default: ConsoleAdmin
    Description: The user name for the Management Console. Consisting of 1-64 ASCII
      characters.
    MaxLength: '64'
    MinLength: '1'
    Type: String
  AdminPassword:
    AllowedPattern: ^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])[A-Za-z0-9!#$%&()*+,.:;<=>?\[\]^_`{|}~-]*$
    Description: 'Password for Management Console User. Password must contain 8 to
      64 printable ASCII characters excluding: /, ", '', \ and @. It must contain
      1 uppercase letter, 1 lowercase letter, and 1 number.'
    MaxLength: 64
    MinLength: 8
    NoEcho: 'true'
    Type: String
  CreateCognitoAdminRoleARN:
    Type: String
  QSDeploymentSuffix:
    AllowedPattern: '[a-z0-9]+'
    ConstraintDescription: Deployment suffix can include numbers, lowercase letters
      and should have the maximum length of 7 characters.
    Default: qs
    Description: You can deploy this Quick Start multiple times in the same region
      if you provide a different suffix that is added to resource names to make them
      unique per each deployment. Use this parameter to support deployment of production
      and test environments in the same region in the same AWS account.
    MaxLength: 12
    MinLength: 1
    Type: String
  RegionalLambdaBucketName:
    Type: String
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        UnusedAccountValidityDays: 365
      AliasAttributes:
        - preferred_username
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireSymbols: false
          RequireNumbers: true
      Schema:
        - Name: family_name
          AttributeDataType: String
          Mutable: True
          Required: 'true'
        - Name: given_name
          AttributeDataType: String
          Mutable: True
          Required: 'true'
      UserPoolName: !Sub 'idc_user_pool_${QSDeploymentSuffix}'
  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref 'CognitoUserPool'
      ClientName: !Sub 'idc_user_pool_client_${QSDeploymentSuffix}'
      GenerateSecret: 'true'
  CreateCognitoAdminLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'RegionalLambdaBucketName'
        S3Key: !Sub lambda_deployment_package.zip
      Description: Create admin in cognito user pool
      Environment:
        Variables:
          USER_POOL_ID: !Ref 'CognitoUserPool'
          APP_CLIENT_ID: !Ref 'CognitoAppClient'
          ADMIN_USERNAME: !Ref 'AdminUsername'
          ADMIN_PASSWORD: !Ref 'AdminPassword'
      Handler: source.create_cognito_admin.lambda_handler
      Role: !Ref 'CreateCognitoAdminRoleARN'
      Runtime: python3.6
      Timeout: 30
  CreateCognitoAdmin:
    Type: Custom::CreateCognitoAdmin
    Properties:
      ServiceToken: !GetAtt 'CreateCognitoAdminLambda.Arn'
Outputs:
  CognitoUserPoolId:
    Value: !Ref 'CognitoUserPool'
  CognitoAppClientId:
    Value: !Ref 'CognitoAppClient'
  CognitoClientSecret:
    Value: !Sub '${CreateCognitoAdmin.ClientSecret}'