AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloudformation template to create ECS service and run API app. **WARNING**
  You will be billed for the AWS resources used if you create a stack from this template.
Parameters:
  AthenaDatabaseName:
    Description: Athena database name with table with managed feeds
    Type: String
  AthenaNumericTableName:
    Description: Athena table name with numeric managed feeds
    Type: String
  AthenaTextTableName:
    Description: Athena table name with text managed feeds
    Type: String
  BackfillQueueName:
    Description: Name of incoming backfill/interpolation queue
    Type: String
  CognitoUserPoolId:
    Description: Cognito user pool ID for user management
    Type: String
  CognitoUserPoolAppClientId:
    Description: Cognito app client id for specified user pool
    Type: String
  CognitoClientSecret:
    Description: Cognito client secret for specified app client
    Type: String
  CuratedDatasetsBucketName:
    Type: String
  DataTransportService:
    AllowedValues:
      - AWS IoT
      - Amazon Kinesis
    Default: Amazon Kinesis
    Description: Method that defines how data from feed server will be delivered to
      AWS. You can AWS Kinesis or AWS IoT. Depending on your choice, enter values
      for the parameters in one of the next two categories.
    Type: String
  ECSCluster:
    Description: ARN of the cluster that you want to run your Amazon ECS service on.
    Type: String
  ECSTaskExecutionRoleARN:
    Description: ECS Task Execution Role
    Type: String
  IncomingQueueName:
    Description: Name of incoming SQS queue
    Type: String
  InterpolationQueueName:
    Description: Name of outgoing interpolation queue
    Type: String
  APIInstanceRoleARN:
    Type: String
  PublicSubnet1ID:
    Description: Elastic load balancer subnet 1
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: Elastic load balancer subnet 2
    Type: AWS::EC2::Subnet::Id
  PublishedDataBucketName:
    Type: String
  QSDeploymentSuffix:
    AllowedPattern: '[a-z0-9]+'
    ConstraintDescription: Deployment suffix can include numbers, lowercase letters
      and should have the maximum length of 7 characters.
    Default: qs
    Description: You can deploy this Quick Start multiple times in the same region
      if you provide a different suffix that is added to resource names to make them
      unique per each deployment. Use this parameter to support deployment of production
      and test environments in the same region in the same AWS account.
    MaxLength: 12
    MinLength: 1
    Type: String
  SubscriptionQueueName:
    Description: Name of incoming subscription queue
    Type: String
  ServiceName:
    Default: API-instance
    Description: Name of ECS service
    Type: String
  TaskCount:
    Description: The number of simultaneous api tasks that you want to run on the
      cluster.
    Type: Number
    Default: 1
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
  VpcId:
    Description: API server VPC
    Type: AWS::EC2::VPC::Id
  RDSUri:
    Description: RDS connection uri
    Type: String
    NoEcho: 'true'
  AsSynchronizationLambdaARN:
    Description: ARN of asset structure synchronization lambda
    Type: String
  FeedsSynchronizationLambdaARN:
    Description: ARN of feeds synchronization lambda
    Type: String
  ConnectorType:
    Type: String
  ApiInstanceDockerTag:
    Type: String
Resources:
  ELBSecurityGroup:
    Properties:
      GroupDescription: Enable Elastic Load Balancer access via port 80 for VPC
      SecurityGroupIngress:
        - CidrIp: !Ref 'VPCCIDR'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  ElasticLoadBalancer:
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref 'ELBSecurityGroup'
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ElasticLoadBalancer
    Properties:
      Port: 4005
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /healthcheck
      HealthCheckPort: 4005
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
      VpcId: !Ref 'VpcId'
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ElasticLoadBalancer'
      Port: 80
      Protocol: HTTP
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ServiceName}-${QSDeploymentSuffix}'
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      Cluster: !Ref 'ECSCluster'
      ServiceName: !Ref 'ServiceName'
      DesiredCount: !Ref 'TaskCount'
      LoadBalancers:
        - ContainerPort: 4005
          ContainerName: !Sub '${ServiceName}-container'
          TargetGroupArn: !Ref 'TargetGroup'
      LaunchType: EC2
      TaskDefinition: !Ref 'TaskDefinition'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: REGION
              Value: !Sub '${AWS::Region}'
            - Name: ACCOUNT_ID
              Value: !Sub '${AWS::AccountId}'
            - Name: CURATED_DATASETS_BUCKET_NAME
              Value: !Ref 'CuratedDatasetsBucketName'
            - Name: PUBLISHED_DATASETS_BUCKET_NAME
              Value: !Ref 'PublishedDataBucketName'
            - Name: INCOMING_QUEUE_NAME
              Value: !Ref 'IncomingQueueName'
            - Name: INTERPOLATION_QUEUE_NAME
              Value: !Ref 'InterpolationQueueName'
            - Name: BACKFILL_QUEUE_NAME
              Value: !Ref 'BackfillQueueName'
            - Name: SUBSCRIPTION_QUEUE_NAME
              Value: !Ref 'SubscriptionQueueName'
            - Name: ATHENA_NUMERIC_TABLE_NAME
              Value: !Ref 'AthenaNumericTableName'
            - Name: ATHENA_TEXT_TABLE_NAME
              Value: !Ref 'AthenaTextTableName'
            - Name: ATHENA_DATABASE_NAME
              Value: !Ref 'AthenaDatabaseName'
            - Name: DATA_TRANSPORT_SERVICE
              Value: !Ref 'DataTransportService'
            - Name: POSTGRES_URI
              Value: !Ref 'RDSUri'
            - Name: AS_SYNC_LAMBDA_ARN
              Value: !Ref 'AsSynchronizationLambdaARN'
            - Name: FEEDS_SYNC_LAMBDA_ARN
              Value: !Ref 'FeedsSynchronizationLambdaARN'
            - Name: CONNECTOR_TYPE
              Value: !Ref 'ConnectorType'
            - Name: COGNITO_USER_POOL_ID
              Value: !Ref 'CognitoUserPoolId'
            - Name: COGNITO_APP_CLIENT_ID
              Value: !Ref 'CognitoUserPoolAppClientId'
            - Name: COGNITO_CLIENT_SECRET
              Value: !Ref 'CognitoClientSecret'
          Image:
            Fn::ImportValue:
              !Sub 'awsitsdc-ApiInstanceImageURI-${QSDeploymentSuffix}'
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-stream-prefix: ecs
          MemoryReservation: 512
          Name: !Sub '${ServiceName}-container'
          PortMappings:
            - HostPort: 4005
              Protocol: tcp
              ContainerPort: 4005
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRoleARN'
      NetworkMode: host
      TaskRoleArn: !Ref 'APIInstanceRoleARN'
Outputs:
  APIEndpoint:
    Value: !GetAtt 'ElasticLoadBalancer.DNSName'
    Description: API URL
